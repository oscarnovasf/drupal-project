<?php

/**
 * @file
 * igbinary.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Render\Markup;
use Drupal\Core\Site\Settings;
use Drupal\redis\ClientFactory;

use Drupal\igbinary\lib\general\MarkdownParser;

/**
 * Implements hook_help().
 */
function igbinary_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {

    case 'help.page.igbinary':
      /* Añado el contenido del archivo README.md a la ayuda del módulo */
      $parser = new MarkdownParser();

      $module_path = \Drupal::service('extension.path.resolver')
        ->getPath('module', "igbinary");

      $readme_ruta = $module_path . "/README.md";
      $contenido = '';
      if (file_exists($readme_ruta)) {
        $contenido = file_get_contents($readme_ruta);
        $contenido = Markup::create($parser->text($contenido));
      }

      $template_path = $module_path . "/templates/custom/help.html.twig";
      $template = file_get_contents($template_path);
      $build = [
        'description' => [
          '#type' => 'inline_template',
          '#template' => $template,
          '#context' => [
            'readme' => $contenido,
          ],
        ],
      ];
      return $build;

    default:
  }
}

/**
 * Implements hook_cache_flush().
 */
function igbinary_cache_flush() {
  if (!(ClientFactory::hasClient())) {
    return;
  }

  $redis = ClientFactory::getClient();
  if (!is_object($redis)) {
    return;
  }

  // Get the database index to use. If not set, simply abort by returning.
  $redis_connection_settings = Settings::get('redis.connection');
  if (!isset($redis_connection_settings['interface'])) {
    return;
  }

  // Get the cache prefix or prefixes.
  $prefix = Settings::get('cache_prefix');

  // Delete any keys found, handling arrays of prefixes/bins as well.
  if (is_array($prefix)) {
    return;
  }

  $keys = $redis->keys("$prefix*");
  $redis->del($keys);
}
